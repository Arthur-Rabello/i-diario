$(function() {
  'use strict';

  const flashMessages = new FlashMessages();

  const $form = $('#user-role-form');
  const $btn = $form.find('button');
  const $loader = $('#page-loading');
  const teacherId = getValue($form.find('#user_teacher_id'));

  // fields
  const $roleField = $form.find('#user_current_user_role_id');
  const $unityField = $form.find('#user_current_unity_id');
  const $yearField = $form.find('#user_current_school_year');
  const $classroomField = $form.find('#user_current_classroom_id');
  const $teacherField = $form.find('#user_assumed_teacher_id');
  const $disciplineField = $form.find('#current_discipline_id');

  // field containers
  const $unityContainer = $form.find('#unity-field-container');
  const $yearContainer = $form.find('#school-year-field-container');
  const $classroomContainer = $form.find('#classroom-field-container');
  const $teacherContainer = $form.find('#assumed-teacher-field-container');
  const $disciplineContainer = $form.find('#discipline-field-container');

  let profileRole = {};

  let profileData = {
    role: getValue($roleField),
    unity: getValue($unityField),
    year: getValue($yearField),
    classroom: getValue($classroomField),
    teacher: getValue($teacherField),
    discipline: getValue($disciplineField)
  };

  function getProfileRole(roleId) {
    const defer = $.Deferred();
    const currentRoleId = profileRole.role_id || null;

    if (roleId === null) {
      roleId = getValue($roleField);
    }

    if (roleId !== null && parseInt(currentRoleId, 10) === parseInt(roleId, 10)) {
      defer.resolve(profileRole);
    } else {
      const request = $.ajax({
        url: Routes.user_role_pt_br_path(roleId, { format: 'json' })
      });

      request.done(function (data) {
        profileRole = data.user_role;

        defer.resolve(data.user_role);
      });

      request.fail(function () {
        defer.reject();
      });
    }

    return defer.promise();
  }

  function getValue (field) {
    const value = field.val();

    if (_.isEmpty(value) || parseInt(value, 10) === 0) {
      return null;
    }

    return value;
  }

  function setValue (field, value) {
    field.select2('val', value);
    field.val(value);
    field.trigger('change');
  }

  function insertEmptyOption (options) {
    options.unshift({
      id: 'empty',
      text: '<option></option>'
    });

    return options;
  }

  function clearOptions (elm) {
    elm.val('');
    elm.select2('val', '');
    elm.select2({data: []});
  }

  function setOptions (field, options) {
    options = _.isEmpty(options) ? [] : insertEmptyOption(options);

    field.select2({
      formatResult: function(el) {
        return "<div class='select2-user-result'>" + el.text + "</div>";
      },
      data: options
    });
  }

  function hideAndResetOnEvent (containers, event) {
    $.each(containers, function () {
      const $this = $(this);
      const $field = $this.find('input.select2');

      $this.on(event, function () {
        $this.hide();
        clearOptions($field);
      });
    })
  }

  function triggerEventOnContainers (containers, event) {
    $.each(containers, function () {
      $(this).trigger(event);
    })
  }

  hideAndResetOnEvent([
    $yearContainer,
    $classroomContainer,
    $teacherContainer,
    $disciplineContainer
  ], 'profile:role');

  hideAndResetOnEvent([
    $classroomContainer,
    $teacherContainer,
    $disciplineContainer
  ], 'profile:unity');

  hideAndResetOnEvent([
    $teacherContainer,
    $disciplineContainer
  ], 'profile:year');

  hideAndResetOnEvent([
    $disciplineContainer
  ], 'profile:classroom');

  $roleField.on('change', function () {
    const $this = $(this);
    const roleId = getValue($this);

    if (!roleId) {
      return;
    }

    profileData['role'] = roleId;

    $.when(getProfileRole(roleId)).then(function () {
      triggerEventOnContainers([
        $unityContainer,
        $yearContainer,
        $classroomContainer,
        $teacherContainer,
        $disciplineContainer
      ], 'profile:role');
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_access_level_error') %>");
    });
  });

  $unityContainer.on('profile:role', function () {
    const $this = $(this);
    const $field = $this.find('input.select2');

    $this.hide();
    clearOptions($field);

    if (['parent', 'student'].indexOf(profileRole.role.access_level) !== -1) {
      $.each([
        $yearContainer,
        $classroomContainer,
        $teacherContainer,
        $disciplineContainer
      ], function () {
        const $this = $(this);
        const $field = $this.find('input.select2');

        $this.hide();
        clearOptions($field);
      });

      return;
    }

    $.when(getProfileRole(profileRole.role_id || null)).then(function () {
      return $.ajax({
        url: Routes.search_unities_pt_br_path({
          format: 'json',
          per: 9999999
        })
      });
    }).then(function (data) {
      const unities = _.map(data.unities, function (unity) {
        return { id: unity['id'], text: unity['name'] };
      });

      setOptions($field, unities);

      if (profileRole.role.access_level === 'administrator') {
        $this.show();
      } else {
        setValue($field, profileRole.unity_id);
      }
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_schools_error') %>");
    });
  });

  $unityField.on('change', function () {
    const unityId = getValue($(this));

    if (!unityId) {
      return;
    }

    profileData['unity'] = unityId;

    const request = $.getJSON(Routes.unities_pt_br_path() + '/' + unityId);

    request.done(function (data) {
      if (data.unit_type === 'cost_center') {
        $.each([
          $yearContainer,
          $classroomContainer,
          $teacherContainer,
          $disciplineContainer
        ], function () {
          const $this = $(this);
          const $field = $this.find('input.select2');

          $this.hide();
          clearOptions($field);
        });
      } else {
        triggerEventOnContainers([
          $yearContainer,
          $classroomContainer,
          $teacherContainer,
          $disciplineContainer
        ], 'profile:unity');
      }
    });
  });

  $yearContainer.on('profile:unity', function () {
    const $this = $(this);
    const $field = $this.find('input.select2');

    $this.hide();
    clearOptions($field);

    $.when(getProfileRole(profileRole.role_id || null)).then(function () {
      return $.ajax({
        url: Routes.years_from_unity_school_calendars_pt_br_path({
          unity_id: profileData.unity,
          format: 'json'
        })
      });
    }).then(function (data) {
      const years = _.map(data.school_calendars, function (year) {
        return { id: year['id'], text: year['name'] };
      });

      setOptions($field, years);

      if (profileRole.can_change_school_year) {
        $this.show();
      } else {
        setValue($field, years[1].id);
      }
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_years_error') %>");
    });
  });

  $yearField.on('change', function () {
    const year = getValue($(this));

    if (!year) {
      return;
    }

    profileData['year'] = year;

    triggerEventOnContainers([
      $classroomContainer,
      $teacherContainer,
      $disciplineContainer
    ], 'profile:year');
  });

  $classroomContainer.on('profile:year', function () {
    const $this = $(this);
    const $field = $this.find('input.select2');

    $this.hide();
    clearOptions($field);

    let filters = {
      by_unity: profileData.unity,
      by_year: profileData.year
    };

    $.when(getProfileRole(profileRole.role_id || null)).then(function () {
      if (profileRole.role.access_level === 'teacher') {
        filters['by_teacher_id'] = teacherId;
      }

      return $.ajax({
        url: Routes.classrooms_pt_br_path({
          filter: filters,
          format: 'json'
        })
      });
    }).then(function (data) {
      const classrooms = _.map(data, function(classroom) {
        return { id: classroom.id,  text: classroom.description };
      });

      setOptions($field, classrooms);

      $this.show();
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_classrooms_error') %>");
    });
  });

  $classroomField.on('change', function () {
    const classroomId = getValue($(this));

    if (!classroomId) {
      return;
    }

    profileData['classroom'] = classroomId;

    triggerEventOnContainers([
      $teacherContainer,
      $disciplineContainer
    ], 'profile:classroom');
  });

  $teacherContainer.on('profile:classroom', function () {
    const $this = $(this);
    const $field = $this.find('input.select2');

    $this.hide();
    clearOptions($field);

    let filters = {
      by_unity_id: profileData.unity,
      by_year: profileData.year,
      by_classroom: profileData.classroom
    };

    $.when(getProfileRole(profileRole.role_id || null)).then(function () {
      if (profileRole.role.access_level === 'teacher') {
        filters['by_id'] = teacherId;
      }

      return $.ajax({
        url: Routes.teachers_pt_br_path({
          filter: filters,
          format: 'json'
        })
      });
    }).then(function (data) {
      const teachers = _.map(data, function (teacher) {
        return { id: teacher.id,  text: teacher.name };
      });

      setOptions($field, teachers);

      if (profileRole.role.access_level === 'teacher') {
        setValue($field, teacherId);
      } else {
        $this.show();
      }
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_teachers_error') %>");
    });
  });

  $teacherField.on('change', function () {
    const teacherId = getValue($(this));

    if (!teacherId) {
      return;
    }

    profileData['teacher'] = teacherId;

    $disciplineContainer.trigger('profile:teacher');
  });

  $disciplineContainer.on('profile:teacher', function () {
    const $this = $(this);
    const $field = $this.find('input.select2');

    $this.hide();
    clearOptions($field);

    const filters = {
      by_classroom: profileData.classroom,
      by_teacher_id: profileData.teacher
    };

    $.when(getProfileRole(profileRole.role_id || null)).then(function () {
      return $.ajax({
        url: Routes.search_disciplines_pt_br_path({
          format: 'json',
          filter: filters
        })
      });
    }).then(function (data) {
      const disciplines = _.map(data.disciplines, function(discipline) {
        return { id: discipline.id, text: discipline.description };
      });

      setOptions($field, disciplines);

      $this.show();
    }, function () {
      flashMessages.error("<%= I18n.t('layouts.error_messages.fetch_discipines_error') %>");
    });
  });

  $disciplineField.on('change', function () {
    const disciplineId = getValue($(this));

    if (!disciplineId) {
      return;
    }

    profileData['discipline'] = disciplineId;
  });

  $form.on('ajax:success', function() {
    location.href = Routes.root_pt_br_path;
  });

  $form.on('ajax:send', function() {
    $loader.removeClass('hidden');
    $btn.prop('disabled', true);
  });

  $form.on('ajax:error', function(event, request) {
    $loader.addClass('hidden');
    $btn.prop('disabled', false);

    const invalidFields = request.responseJSON || {};

    if (invalidFields.current_user_role_id !== undefined) {
      flashMessages.error("<%= I18n.t('layouts.error_messages.needs_profile') %>");
    } else if (invalidFields.current_unity_id !== undefined) {
      flashMessages.error("<%= I18n.t('layouts.error_messages.needs_unity') %>");
    } else if (invalidFields.current_classroom_id !== undefined) {
      flashMessages.error("<%= I18n.t('layouts.error_messages.needs_classroom') %>");
    } else if (invalidFields.current_discipline_id !== undefined) {
      flashMessages.error("<%= I18n.t('layouts.error_messages.needs_discipline') %>");
    } else {
      flashMessages.error("<%= I18n.t('layouts.error_messages.unknown_error') %>");
    }
  });
});
